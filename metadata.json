{
  "compiler": { "version": "0.8.28+commit.7893614a" },
  "language": "Solidity",
  "output": {
    "abi": [
      {
        "inputs": [
          { "internalType": "address", "name": "owner", "type": "address" }
        ],
        "name": "OwnableInvalidOwner",
        "type": "error"
      },
      {
        "inputs": [
          { "internalType": "address", "name": "account", "type": "address" }
        ],
        "name": "OwnableUnauthorizedAccount",
        "type": "error"
      },
      {
        "inputs": [
          { "internalType": "address", "name": "token", "type": "address" }
        ],
        "name": "SafeERC20FailedOperation",
        "type": "error"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "previousOwner",
            "type": "address"
          },
          {
            "indexed": true,
            "internalType": "address",
            "name": "newOwner",
            "type": "address"
          }
        ],
        "name": "OwnershipTransferred",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "user",
            "type": "address"
          },
          {
            "indexed": true,
            "internalType": "address",
            "name": "token",
            "type": "address"
          },
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "amount",
            "type": "uint256"
          },
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "unlockTime",
            "type": "uint256"
          }
        ],
        "name": "TokensLocked",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "user",
            "type": "address"
          },
          {
            "indexed": true,
            "internalType": "address",
            "name": "token",
            "type": "address"
          },
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "amount",
            "type": "uint256"
          }
        ],
        "name": "TokensUnlocked",
        "type": "event"
      },
      {
        "inputs": [
          { "internalType": "address", "name": "_user", "type": "address" }
        ],
        "name": "getAllLocks",
        "outputs": [
          {
            "components": [
              { "internalType": "address", "name": "user", "type": "address" },
              { "internalType": "address", "name": "token", "type": "address" },
              {
                "internalType": "uint256",
                "name": "amount",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "unlockTime",
                "type": "uint256"
              }
            ],
            "internalType": "struct LiquidityLocker.Lock[]",
            "name": "",
            "type": "tuple[]"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          { "internalType": "address", "name": "_user", "type": "address" },
          { "internalType": "uint256", "name": "_index", "type": "uint256" }
        ],
        "name": "getLock",
        "outputs": [
          { "internalType": "address", "name": "token", "type": "address" },
          { "internalType": "uint256", "name": "amount", "type": "uint256" },
          { "internalType": "uint256", "name": "unlockTime", "type": "uint256" }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          { "internalType": "address", "name": "_user", "type": "address" }
        ],
        "name": "getLockCount",
        "outputs": [
          { "internalType": "uint256", "name": "", "type": "uint256" }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          { "internalType": "address", "name": "_token", "type": "address" }
        ],
        "name": "getTokenLockInfo",
        "outputs": [
          { "internalType": "bool", "name": "isLocked", "type": "bool" },
          {
            "internalType": "uint256",
            "name": "totalAmountLocked",
            "type": "uint256"
          },
          {
            "internalType": "uint256[]",
            "name": "unlockTimes",
            "type": "uint256[]"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          { "internalType": "address", "name": "_token", "type": "address" },
          { "internalType": "uint256", "name": "_amount", "type": "uint256" },
          { "internalType": "uint256", "name": "_duration", "type": "uint256" }
        ],
        "name": "lockTokens",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "owner",
        "outputs": [
          { "internalType": "address", "name": "", "type": "address" }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "renounceOwnership",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          { "internalType": "address", "name": "", "type": "address" },
          { "internalType": "uint256", "name": "", "type": "uint256" }
        ],
        "name": "tokenLockTimes",
        "outputs": [
          { "internalType": "uint256", "name": "", "type": "uint256" }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          { "internalType": "address", "name": "", "type": "address" }
        ],
        "name": "totalLockedAmount",
        "outputs": [
          { "internalType": "uint256", "name": "", "type": "uint256" }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          { "internalType": "address", "name": "newOwner", "type": "address" }
        ],
        "name": "transferOwnership",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256[]",
            "name": "_lockIndices",
            "type": "uint256[]"
          }
        ],
        "name": "unlockTokens",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      }
    ],
    "devdoc": {
      "errors": {
        "OwnableInvalidOwner(address)": [
          {
            "details": "The owner is not a valid owner account. (eg. `address(0)`)"
          }
        ],
        "OwnableUnauthorizedAccount(address)": [
          {
            "details": "The caller account is not authorized to perform an operation."
          }
        ],
        "SafeERC20FailedOperation(address)": [
          { "details": "An operation with an ERC-20 token failed." }
        ]
      },
      "kind": "dev",
      "methods": {
        "getAllLocks(address)": {
          "params": { "_user": "The address of the user." },
          "returns": { "_0": "An array of all active locks for the user." }
        },
        "getLock(address,uint256)": {
          "params": {
            "_index": "The index of the lock.",
            "_user": "The address of the user."
          },
          "returns": {
            "amount": "The amount of tokens locked.",
            "token": "The address of the locked token.",
            "unlockTime": "The timestamp when the tokens can be unlocked."
          }
        },
        "getLockCount(address)": {
          "params": { "_user": "The address of the user." },
          "returns": { "_0": "The number of active locks." }
        },
        "getTokenLockInfo(address)": {
          "params": { "_token": "The address of the ERC20 token." },
          "returns": {
            "isLocked": "Boolean indicating if the token is locked.",
            "totalAmountLocked": "The total amount of tokens locked.",
            "unlockTimes": "An array of unlock times for the token."
          }
        },
        "lockTokens(address,uint256,uint256)": {
          "params": {
            "_amount": "The amount of tokens to lock.",
            "_duration": "Duration in seconds to lock the tokens.",
            "_token": "The address of the ERC20 token to lock."
          }
        },
        "owner()": { "details": "Returns the address of the current owner." },
        "renounceOwnership()": {
          "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
        },
        "transferOwnership(address)": {
          "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
        },
        "unlockTokens(uint256[])": {
          "params": { "_lockIndices": "An array of lock indices to unlock." }
        }
      },
      "version": 1
    },
    "userdoc": {
      "kind": "user",
      "methods": {
        "getAllLocks(address)": { "notice": "Get all locks for a user." },
        "getLock(address,uint256)": {
          "notice": "Get details of a specific lock for a user."
        },
        "getLockCount(address)": {
          "notice": "Get the number of active locks for a user."
        },
        "getTokenLockInfo(address)": {
          "notice": "Get lock status, total locked amount, and all unlock times for a specific token."
        },
        "lockTokens(address,uint256,uint256)": {
          "notice": "Lock ERC20 tokens for a specified duration."
        },
        "unlockTokens(uint256[])": {
          "notice": "Unlock tokens that have reached their unlock time."
        }
      },
      "version": 1
    }
  },
  "settings": {
    "compilationTarget": { "Locker.sol": "LiquidityLocker" },
    "evmVersion": "paris",
    "libraries": {},
    "metadata": { "bytecodeHash": "ipfs" },
    "optimizer": { "enabled": true, "runs": 200 },
    "remappings": []
  },
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "keccak256": "0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb",
      "license": "MIT",
      "urls": [
        "bzz-raw://8ed324d3920bb545059d66ab97d43e43ee85fd3bd52e03e401f020afb0b120f6",
        "dweb:/ipfs/QmfEckWLmZkDDcoWrkEvMWhms66xwTLff9DDhegYpvHo1a"
      ]
    },
    "@openzeppelin/contracts/interfaces/IERC1363.sol": {
      "keccak256": "0x9b6b3e7803bc5f2f8cd7ad57db8ac1def61a9930a5a3107df4882e028a9605d7",
      "license": "MIT",
      "urls": [
        "bzz-raw://da62d6be1f5c6edf577f0cb45666a8aa9c2086a4bac87d95d65f02e2f4c36a4b",
        "dweb:/ipfs/QmNkpvBpoCMvX8JwAFNSc5XxJ2q5BXJpL5L1txb4QkqVFF"
      ]
    },
    "@openzeppelin/contracts/interfaces/IERC165.sol": {
      "keccak256": "0xde7e9fd9aee8d4f40772f96bb3b58836cbc6dfc0227014a061947f8821ea9724",
      "license": "MIT",
      "urls": [
        "bzz-raw://11fea9f8bc98949ac6709f0c1699db7430d2948137aa94d5a9e95a91f61a710a",
        "dweb:/ipfs/QmQdfRXxQjwP6yn3DVo1GHPpriKNcFghSPi94Z1oKEFUNS"
      ]
    },
    "@openzeppelin/contracts/interfaces/IERC20.sol": {
      "keccak256": "0xce41876e78d1badc0512229b4d14e4daf83bc1003d7f83978d18e0e56f965b9c",
      "license": "MIT",
      "urls": [
        "bzz-raw://a2608291cb038b388d80b79a06b6118a42f7894ff67b7da10ec0dbbf5b2973ba",
        "dweb:/ipfs/QmWohqcBLbcxmA4eGPhZDXe5RYMMEEpFq22nfkaUMvTfw1"
      ]
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "keccak256": "0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1",
      "license": "MIT",
      "urls": [
        "bzz-raw://41319e7f621f2dc3733511332c4fd032f8e32ad2aa7fd6f665c19741d9941a34",
        "dweb:/ipfs/QmcYR3bd862GD1Bc7jwrU9bGxrhUu5na1oP964bDCu2id1"
      ]
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "keccak256": "0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7",
      "license": "MIT",
      "urls": [
        "bzz-raw://df6f0c459663c9858b6cba2cda1d14a7d05a985bed6d2de72bd8e78c25ee79db",
        "dweb:/ipfs/QmeTTxZ7qVk9rjEv2R4CpCwdf8UMCcRqDNMvzNxHc3Fnn9"
      ]
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "keccak256": "0xca2ae13e0610f6a99238dd00b97bd786bc92732dae6d6b9d61f573ec51018310",
      "license": "MIT",
      "urls": [
        "bzz-raw://75f8c71ce0c91c40dd5f249ace0b7d8270f8f1767231bcf71490f7157d6ba862",
        "dweb:/ipfs/QmYXgxeDyFHvz3JsXxLEYN6GNUR44ThHeFj5XkpkgMoG4w"
      ]
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "keccak256": "0x9d8da059267bac779a2dbbb9a26c2acf00ca83085e105d62d5d4ef96054a47f5",
      "license": "MIT",
      "urls": [
        "bzz-raw://c78e2aa4313323cecd1ef12a8d6265b96beee1a199923abf55d9a2a9e291ad23",
        "dweb:/ipfs/QmUTs2KStXucZezzFo3EYeqYu47utu56qrF7jj1Gue65vb"
      ]
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "keccak256": "0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2",
      "license": "MIT",
      "urls": [
        "bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12",
        "dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF"
      ]
    },
    "@openzeppelin/contracts/utils/Errors.sol": {
      "keccak256": "0x6afa713bfd42cf0f7656efa91201007ac465e42049d7de1d50753a373648c123",
      "license": "MIT",
      "urls": [
        "bzz-raw://ba1d02f4847670a1b83dec9f7d37f0b0418d6043447b69f3a29a5f9efc547fcf",
        "dweb:/ipfs/QmQ7iH2keLNUKgq2xSWcRmuBE5eZ3F5whYAkAGzCNNoEWB"
      ]
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "keccak256": "0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8",
      "license": "MIT",
      "urls": [
        "bzz-raw://f6fda447a62815e8064f47eff0dd1cf58d9207ad69b5d32280f8d7ed1d1e4621",
        "dweb:/ipfs/QmfDRc7pxfaXB2Dh9np5Uf29Na3pQ7tafRS684wd3GLjVL"
      ]
    },
    "Locker.sol": {
      "keccak256": "0xe4f1c95cceb31fc19ebb3fc4524185596f55c7ab413eb6f39d47544539fc7340",
      "license": "MIT",
      "urls": [
        "bzz-raw://5d56d88d5df18709ff527c6cce744fe168c6f3008794b9bfd02411541c3b6473",
        "dweb:/ipfs/QmaiycCSi4HvAW9SJ3tPacTtnwUnzfgK48QouRkNJRwEx6"
      ]
    }
  },
  "version": 1
}
